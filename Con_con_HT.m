clc
clear 
close all
T_r = 0.2           ; %: Total Radius in m
T_z = 1             ; %: total length in m 
T_t = 5         ; %: total analysis time in s
nr = 100          ; %: no of spatial volumes in r direction
nz = 350         ; %: no of spatial volume in z direction
del_r = T_r/nr ; del_z=T_z/nz;
full_temp=[];
k = 0.637;          % Thermal conductivity of water (W/m°C or J/s·m·°C)
rho_d = 997;          % Density of water (kg/m³)
cp_h = 4182;          % Specific heat capacity (J/kg·°C)
a = k / (rho_d * cp_h); % Thermal diffusivity (alpha)close all
T_in = 293.15;          % Inlet temperature (°C)
u_in = 5;           % Inlet velocity (m/s)
phi_flux = 1e5;          % Flux at the wall boundary condition (W/m²)
CFL = 0.2;          % Stability condition (Courant number)
del_t = CFL * del_z / u_in; % Time step size
F_r = (a*del_t)/(del_r^2); F_z = (a*del_t)/(del_z^2);
ko=0:del_t:T_t; sk_ip = fix(length(ko)/30);
time_skip = 1:sk_ip:length(ko);
T = zeros(nz, nr, length(ko)); % Temperature array (nz x nr x time)
T(:, :, 1) = 293.15; % Set initial temperature
skip_ct=1;
for n = 2:length(ko)      
    for i = 1:nz
        r = 0; % Reset radius for each radial node
        for j = 1:nr
            rp = r + del_r;
            uz = 2 * u_in * (1 - ((r+(del_r/2)) / T_r)^2); % Velocity profile
            vij = (pi*(rp+r)*del_r*del_z)/2;
            % Control volumes
            Ae = (pi / 2) * (rp + r) * del_r;
            Aw = (pi / 2) * (rp + r) * del_r;
            An = pi * rp * del_z;
            As = pi * r * del_z;
            
            % Region-specific temperature updates
            if i == 1 && j == nr % Region 1
            T(i, j, n) = T(i, j, n - 1) ...
...%                     |**North Flux**|*************************South Diffusion***************************|
                         +(del_t/vij) * (  (phi_flux*An)/(rho_d*cp_h) - (a*As*(T(i, j, n - 1)-T(i, j-1, n - 1))/del_r)  ... 
...
...%                     |***************East Diffusion*******************|***********West Diffusion*************|
                         +(a*Ae*(T(i+1, j, n - 1) - T(i, j, n - 1))/del_z) - (2*a*Aw*(T(i, j, n - 1) - T_in)/del_z) ...
...
                         -((uz*Ae*T(i, j, n - 1))-(uz*Aw*T_in))  ) ; % East and west Advection
            end
            if i == 1 && j == 1 % Region 3
            T(i, j, n) = T(i, j, n-1) ...
...                         
                        +(del_t/vij) * (  (a*An*(T(i, j+1, n - 1)-T(i, j, n - 1))/del_r) ...
...            
                        +(a*Ae*(T(i+1, j, n - 1) - T(i, j, n - 1))/del_z) - (2*a*Aw*(T(i, j, n - 1) - T_in)/del_z) ... 
...
                        -((uz*Ae*T(i, j, n - 1))-(uz*Aw*T_in))  ) ;
            end
            if i == nz && j == nr % Region 7
            T(i, j, n) = T(i, j, n-1) ...
...     
                        +(del_t/vij) * (   (phi_flux*An)/(rho_d*cp_h) - (a*As*(T(i, j, n - 1)-T(i, j-1, n - 1))/del_r)  ... 
...            
                        - (a*Aw*(T(i, j, n - 1) - T(i-1, j, n - 1))/del_z) ...
...             
                         -((uz*Ae*T(i, j, n - 1))-(uz*Aw*T(i-1, j, n - 1)))  ) ;
            end
            if i==nz && j==1  %Region 5
            T(i,j,n) = T(i,j,n-1)                                ...
...
                      +(del_t/vij) * (   (a*An*(T(i, j+1, n - 1)-T(i, j, n - 1))/del_r) ...   
...
                      - (a*Aw*(T(i, j, n - 1) - T(i-1, j, n - 1))/del_z) ...
...
                      - ((uz*Ae*T(i, j, n - 1))-(uz*Aw*T(i-1, j, n - 1)))  ) ; 
            end
            if i==1 && j~=1 && j~=nr % region 2
            T(i, j, n) =  T(i, j, n - 1)  ... 
...                        
            +(del_t/vij) * (  (a*An*(T(i, j+1, n - 1)-T(i, j, n - 1))/del_r) - (a*As*(T(i, j, n - 1)-T(i, j-1, n - 1))/del_r) ...
...            
            +(a*Ae*(T(i+1, j, n - 1) - T(i, j, n - 1))/del_z) - (2*a*Aw*(T(i, j, n - 1) - T_in)/del_z) ...
...            
            - ((uz*Ae*T(i, j, n - 1))-(uz*Aw*T_in))  ) ;

            end
            if  j==1 && i~=1 && i~=nz % Region 4
            T(i, j, n) = T(i, j, n - 1)  ...% changeeeee
 ...
            +(del_t/vij) * (  (a*An*(T(i, j+1, n - 1)-T(i, j, n - 1))/del_r)  ...
 ...            
            +(a*Ae*(T(i+1, j, n - 1) - T(i, j, n - 1))/del_z) - (a*Aw*(T(i, j, n - 1) - T(i-1, j, n - 1))/del_z) ...
 ...
            - ((uz*Ae*T(i, j, n - 1))-(uz*Aw*T(i-1, j, n - 1)))  ) ;

            end
            if i==nz && j~=1 && j~=nr % Region 6
        T(i, j, n) = T(i, j, n - 1)  ... 
...
                     +(del_t/vij) * (    (a*An*(T(i, j+1, n - 1)-T(i, j, n - 1))/del_r) - (a*As*(T(i, j, n - 1)-T(i, j-1, n - 1))/del_r) ...
...
                     - (a*Aw*(T(i, j, n - 1) - T(i-1, j, n - 1))/del_z) ...
...
                     - ((uz*Ae*T(i, j, n - 1))-(uz*Aw*T(i-1, j, n - 1)))  ) ;           
            end
        if j==nr && i~=1 && i~=nz % Region 8
        T(i, j, n) = T(i, j, n - 1)  ... 
...    
                    +(del_t/vij) * (   (phi_flux*An)/(rho_d*cp_h) - (a*As*(T(i, j, n - 1)-T(i, j-1, n - 1))/del_r)  ... 
...        
                    +(a*Ae*(T(i+1, j, n - 1) - T(i, j, n - 1))/del_z) - (a*Aw*(T(i, j, n - 1) - T(i-1, j, n - 1))/del_z) ...
...
                    - ((uz*Ae*T(i, j, n - 1))-(uz*Aw*T(i-1, j, n - 1)))  ) ;  
        end
        if i~=1 && j~=1 && i~=nz && j~=nr       % Region 9   
        T(i, j, n) = T(i, j, n - 1)  ...
...
                    +(del_t/vij) * (  (a*An*(T(i, j+1, n - 1)-T(i, j, n - 1))/del_r) - (a*As*(T(i, j, n - 1)-T(i, j-1, n - 1))/del_r) ...
...            
                    +(a*Ae*(T(i+1, j, n - 1) - T(i, j, n - 1))/del_z) - (a*Aw*(T(i, j, n - 1) - T(i-1, j, n - 1))/del_z) ...
 ...
                    - ((uz*Ae*T(i, j, n - 1))-(uz*Aw*T(i-1, j, n - 1)))  ) ;  
%             T(i, j, n) = T(i, j, n - 1)  ... 
% ...       
%                         + F_z *(T(i+1, j, n - 1) - T(i, j, n - 1)) - F_z * (T(i, j, n - 1) - T(i-1, j, n - 1))  ...
% ...
%                         + (2*F_r*rp* (T(i, j+1, n - 1) - T(i, j, n - 1))/(rp+r)) - (2*F_r*r* (T(i, j, n - 1) - T(i, j-1, n - 1))/(rp+r)) ...
%  ...
%                         - CFL*(T(i, j, n - 1) - T(i-1, j, n - 1)) ;
        end
         r = r +  del_r;
        end
   
    end
    ch = time_skip(skip_ct)
    eck = n
    if n-1==time_skip(skip_ct)
           
        
        if skip_ct==length(time_skip)
            skip_ct=skip_ct;
            sec_name = ko((n));
            temp = T(:, :,n);
        else
        skip_ct=skip_ct+1;
        temp = T(:, :,n-1);
        sec_name = ko((n-1));
        end 
    % temp = T(:, :, n);
    
    go = temp'; % Align rows with radial direction
    
    % rm=flip(go,1); c = rm(end,:); d=go(end,:);e = abs(c-d);
    % go(d,:)=e;
    full_temp = [flip(go,1);go];
    z = del_z/2 : del_z : T_z-(del_z/2) ;
    r1 =del_r/2 : del_r : T_r-(del_r/2) ; 
    r_values = [flip(-r1)  r1 ];
    [Z, R] = meshgrid(z, r_values);
    
    
    % Plot the temperature distribution
    figure;
    contourf(Z, R, full_temp, 500, 'LineColor', 'none');
    colorbar;
    colormap(jet);
    % clim([min(T(:)), max(T(:))]); % Set consistent color range
    xlabel('z (m)');
    ylabel('r (m)');
    % title(sprintf('Temperature Plot for CFL = %d ', CFL))
    title(sprintf('Temperature Distribution at Time %.2f s', sec_name));
    pause(0.5); % Pause for visualization
    end
end
po=gcf;                                        %to save the plots
             do=gca(po);
             exportgraphics(po,"plot_visin.png")
             % title(sprintf('Temperature Plot for CFL = %d ', CFL))
             % % filename = "Temperature plot for CFL " + string(CFL) + ".png"; 
             % filename = "Temperature plot for CFL 1.2" + ".png"; 
             title(sprintf('Temperature Plot for nz = %d and nr = %d', nz, nr))            
             filename = "Temperature plot nz " + string(nz) + " nr " + string(nr) + ".png";  
             saveas(gcf,filename,'png')